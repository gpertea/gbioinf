#!/usr/bin/perl
use strict;
use Getopt::Std;
my $usage = q/Usage:
pull_PAF_regions  [-r <indexed.fasta>] [-x <extraBases>] [-o <outfile>] \
               [-A] [-b <indexed.bam>] [-C] [-w <out.fasta>] [<mappings.paf>]
 
 Extract sub-sequences as FASTA and\/or SAM alignments (if -b option is given)
 based on the mappings found in PAF input <mappings.paf>
 
 PAF input is expected at stdin or as the first non-option argument.
 Requirements:
 <indexed.fasta> must have been indexed with 'samtools faidx'
 <indexed.bam>, if provided, must have been sorted and indexed 
     with 'samtools index'
 seqmanip script is expected to be found in shell's PATH
 
 Options: 
   -A append to output files instead of overwriting them
   -x expand the regions read from the PAF file by <extraBases> bases 
      in both directions (so each region's length will be increased by
      2*<extraBases>)
   -C for the -b option, use samtools to generate the consensus sequence
      for the PAF region(s) as the final output (-o); requires -r also
/;
umask 0002;
getopts('CAx:b:r:w:o:') || die($usage."\n");
my $outfile=$Getopt::Std::opt_o;
my $callcons=$Getopt::Std::opt_C;
my $bfasta=$Getopt::Std::opt_w; #for -b option, write the FASTA file as well
                                #requires -r as well
my $append=$Getopt::Std::opt_A;
$outfile='' if $outfile eq '-';
#if ($outfile) {
#  open(OUTF, '>'.$outfile) || die("Error creating output file $outfile\n");
#  select(OUTF);
#}
#my $ref_fa="/home/gpertea/work/klebsiella/pilon/all41_pilon.fa";
my $ref_fa=$Getopt::Std::opt_r;
my $bam=$Getopt::Std::opt_b;
if ($bfasta && !$bam) {
  die("$usage\nError: option -w requires -b !\n");
}

if ($callcons) {
  die("${usage}Error: option -C requires -b and -r!\n") unless $bam && $ref_fa;
}

if (!$bam || $bfasta) {
  die("$usage\nError: no FASTA file provided!\n") unless $ref_fa;
}
if ($ref_fa) {
  die("Error: FASTA file $ref_fa not found!\n") unless -f $ref_fa;
  die("$usage\nError: FASTA file index $ref_fa.fai not present!\n") unless -f $ref_fa.'.fai';
}
if ($bam) {
  die("Error: BAM file $bam not found!\n") unless -f $bam;
  die("$usage\nError: BAM index $bam.bai not present!\n") unless -f $bam.'.bai';
}


my $xBases=$Getopt::Std::opt_x;

my $outfasta;
my $wfa; #boolean: write fasta?
if ($bam) {
  $outfasta=$bfasta;
  $wfa=1 if $bfasta || $callcons;
  unlink($outfile) if ($outfile && !$append);
  if ($outfile) {
    $outfile=' >> '.$outfile;
  }
}
else { #only write FASTA
  $outfasta=$outfile;
  $wfa=1;
  #unlink($outfasta) if ($outfasta && !$append);
}

if ($outfasta) {
   unlink($outfasta) if !$append;
   $outfasta=' >> '.$outfasta;
}

while(<>) {
    my $l=$_;
    chomp;
    my @t=split(/\t/);
    my ($rstart, $rend)=($t[7]+1-$xBases, $t[8]+$xBases);
    $rstart=1 if $rstart<1;
    $rend=$t[6] if $rend>$t[6];
    my $r=$t[4];
    $r='' if $r eq '+';
    if ($callcons) {
      my $g='rtmp';
      my $cmd="samtools mpileup -ABuf $ref_fa -r '$t[5]:$rstart-$rend' $bam| ".
      "bcftools call --ploidy 1 -c -Oz -o $g.mpileup.vcf.gz";
      system($cmd) && die("Error at running: $cmd\n");
      system("tabix $g.mpileup.vcf.gz");
      system("samtools faidx $ref_fa '$t[5]:$rstart-$rend' | ".
       " bcftools consensus $g.mpileup.vcf.gz $outfasta");
    } else {
      if ($bam) {
        system("samtools view -h $bam '$t[5]:$rstart-$rend'".$outfile);
      }
      if ($wfa) {
       #FASTA extraction
       system("seqmanip -r '$t[5]:$rstart-${rend}$r' $ref_fa ".$outfasta);
      }
    }
}

